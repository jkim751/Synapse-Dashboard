generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id            String         @id
  username      String         @unique
  name          String
  surname       String
  email         String?        @unique
  phone         String?        @unique
  address       String
  img           String?
  sex           UserSex
  createdAt     DateTime       @default(now())
  parentId      String?
  parent        Parent?        @relation(fields: [parentId], references: [id])
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  attendances   Attendance[]
  results       Result[]
  birthday      DateTime
  xeroContactId String? // Xero contact ID for financial operations
  classes       StudentClass[]
}

model Teacher {
  id             String    @id
  username       String    @unique
  name           String
  surname        String
  email          String?   @unique
  phone          String?   @unique
  address        String
  img            String?
  sex            UserSex
  createdAt      DateTime  @default(now())
  subjects       Subject[]
  lessons        Lesson[]
  classes        Class[]
  birthday       DateTime
  xeroEmployeeId String? // Xero employee ID for financial operations

  RecurringLesson RecurringLesson[]
}

model Parent {
  id            String    @id
  username      String    @unique
  name          String
  surname       String
  email         String?   @unique
  phone         String    @unique
  address       String
  createdAt     DateTime  @default(now())
  students      Student[]
  xeroContactId String? // Xero contact ID for financial operations
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      StudentClass[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]

  RecurringLesson RecurringLesson[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]

  RecurringLesson RecurringLesson[]
}

model Lesson {
  id   Int    @id @default(autoincrement())
  name String

  startTime DateTime
  endTime   DateTime

  recurringLessonId Int?
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id], onDelete: Cascade)

  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])
  classId   Int?
  class     Class?   @relation(fields: [classId], references: [id])
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  isCancelled Boolean @default(false)

  exams         Exam[]
  assignments   Assignment[]
  attendances   Attendance[]
  notifications Notification[]
  day           Day
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  documents String[] @default([])

  lessonId Int?
  lesson   Lesson? @relation(fields: [lessonId], references: [id] )

  recurringLessonId Int?
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id])

  results Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  documents String[] @default([])

  lessonId Int?
  lesson   Lesson? @relation(fields: [lessonId], references: [id])

  recurringLessonId Int?
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id] )
  
  results Result[]
}

model Result {
  id    Int    @id @default(autoincrement())
  score Int
  title String

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id] )
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id] , onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model XeroTokens {
  id           String   @id @default(cuid())
  userId       String   @unique // <-- ADD THIS LINE
  accessToken  String
  refreshToken String
  tenantId     String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("xero_tokens")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  recipientId String
  isRead      Boolean  @default(false)
  type        String?
  lessonId    Int?
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

model StudentClass {
  id        Int      @id @default(autoincrement())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId   Int
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  isPrimary Boolean  @default(false) // Optional: mark one class as primary
  createdAt DateTime @default(now())

  @@unique([studentId, classId]) // Ensure a student can't be in the same class twice
  @@index([studentId])
  @@index([classId])
}

model RecurringLesson {
  id        Int      @id @default(autoincrement())
  name      String
  // Stores the recurrence rule in iCalendar format (e.g., 'FREQ=WEEKLY;BYDAY=TU;UNTIL=20251231T235959Z')
  rrule     String
  startTime DateTime // The time the lesson starts (e.g., 14:00:00)
  endTime   DateTime // The time the lesson ends (e.g., 15:00:00)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  lessonInstances Lesson[]
  exams           Exam[]
  assignments     Assignment[]
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
