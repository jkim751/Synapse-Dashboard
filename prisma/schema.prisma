generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id       String   @id
  username String   @unique
  address  String
  birthday DateTime
  email    String?  @unique
  img      String?
  name     String
  phone    String?  @unique
  sex      UserSex
  surname  String
}

model Student {
  id            String         @id
  username      String         @unique
  name          String
  surname       String
  email         String?        @unique
  phone         String?        @unique
  address       String
  img           String?
  sex           UserSex
  createdAt     DateTime       @default(now())
  parentId      String?
  gradeId       Int
  birthday      DateTime
  xeroContactId String?
  school        String?
  updatedAt     DateTime       @updatedAt
  status        StudentStatus  @default(CURRENT)
  attendances   Attendance[]
  results       Result[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  parent        Parent?        @relation(fields: [parentId], references: [id])
  classes       StudentClass[]
}

model Teacher {
  id              String            @id
  username        String            @unique
  name            String
  surname         String
  email           String?           @unique
  phone           String?           @unique
  address         String
  img             String?
  sex             UserSex
  createdAt       DateTime          @default(now())
  birthday        DateTime
  xeroEmployeeId  String?
  classes         Class[]
  lessons         Lesson[]
  RecurringLesson RecurringLesson[]
  subjects        Subject[]         @relation("SubjectToTeacher")
}

model Parent {
  id            String      @id
  username      String      @unique
  name          String
  surname       String
  email         String?     @unique
  phone         String      @unique
  address       String
  createdAt     DateTime    @default(now())
  xeroContactId String?
  paymentType   PaymentType @default(CASH)
  students      Student[]
}

model Grade {
  id                 Int                 @id @default(autoincrement())
  level              Int                 @unique
  announcementGrades AnnouncementGrade[]
  classess           Class[]
  eventGrades        EventGrade[]
  students           Student[]
}

model Class {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  capacity        Int
  supervisorId    String?
  gradeId         Int
  announcements   Announcement[]
  grade           Grade             @relation(fields: [gradeId], references: [id])
  supervisor      Teacher?          @relation(fields: [supervisorId], references: [id])
  events          Event[]
  lessons         Lesson[]
  RecurringLesson RecurringLesson[]
  students        StudentClass[]
}

model Subject {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  lessons         Lesson[]
  RecurringLesson RecurringLesson[]
  teachers        Teacher[]         @relation("SubjectToTeacher")
}

model Lesson {
  id                Int              @id @default(autoincrement())
  name              String
  startTime         DateTime
  endTime           DateTime
  recurringLessonId Int?
  subjectId         Int?
  classId           Int?
  teacherId         String?
  isCancelled       Boolean          @default(false)
  day               Day
  assignments       Assignment[]
  attendances       Attendance[]
  exams             Exam[]
  class             Class?           @relation(fields: [classId], references: [id])
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id], onDelete: Cascade)
  subject           Subject?         @relation(fields: [subjectId], references: [id])
  teacher           Teacher?         @relation(fields: [teacherId], references: [id])
  notifications     Notification[]
}

model Exam {
  id                Int              @id @default(autoincrement())
  title             String
  startTime         DateTime
  endTime           DateTime
  documents         String[]         @default([])
  lessonId          Int?
  recurringLessonId Int?
  lesson            Lesson?          @relation(fields: [lessonId], references: [id])
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id])
  results           Result[]
}

model Assignment {
  id                Int              @id @default(autoincrement())
  title             String
  startDate         DateTime
  dueDate           DateTime
  documents         String[]         @default([])
  lessonId          Int?
  recurringLessonId Int?
  lesson            Lesson?          @relation(fields: [lessonId], references: [id])
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id])
  results           Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  title        String
  examId       Int?
  assignmentId Int?
  studentId    String
  documents    String[]    @default([])
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id                Int              @id @default(autoincrement())
  date              DateTime
  present           Boolean
  studentId         String
  lessonId          Int?
  recurringLessonId Int?
  status            String?          @default("present")
  lesson            Lesson?          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  recurringLesson   RecurringLesson? @relation(fields: [recurringLessonId], references: [id], onDelete: Cascade)
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  class       Class?       @relation(fields: [classId], references: [id])
  eventGrades EventGrade[]
  eventUsers  EventUser[]
}

model EventUser {
  id      Int    @id @default(autoincrement())
  eventId Int
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model EventGrade {
  id      Int   @id @default(autoincrement())
  eventId Int
  gradeId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  grade   Grade @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  @@unique([eventId, gradeId])
}

model Announcement {
  id                 Int                 @id @default(autoincrement())
  title              String
  description        String
  date               DateTime
  classId            Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  class              Class?              @relation(fields: [classId], references: [id])
  announcementGrades AnnouncementGrade[]
  announcementUsers  AnnouncementUser[]
}

model AnnouncementUser {
  id             Int          @id @default(autoincrement())
  announcementId Int
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
}

model AnnouncementGrade {
  id             Int          @id @default(autoincrement())
  announcementId Int
  gradeId        Int
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  grade          Grade        @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  @@unique([announcementId, gradeId])
}

model XeroTokens {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  tenantId     String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("xero_tokens")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String?
  recipientId String
  lessonId    Int?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])

  @@map("notifications")
}

model StudentClass {
  id        Int      @id @default(autoincrement())
  studentId String
  classId   Int
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@index([studentId])
  @@index([classId])
}

model RecurringLesson {
  id              Int          @id @default(autoincrement())
  name            String
  rrule           String
  startTime       DateTime
  endTime         DateTime
  subjectId       Int
  classId         Int
  teacherId       String
  assignments     Assignment[]
  attendances     Attendance[]
  exams           Exam[]
  lessonInstances Lesson[]
  class           Class        @relation(fields: [classId], references: [id])
  subject         Subject      @relation(fields: [subjectId], references: [id])
  teacher         Teacher      @relation(fields: [teacherId], references: [id])
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime // The date this note is associated with
  userId    String   // Link to user who created the note

  @@index([date])
  @@index([userId])
  @@map("notes")
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PaymentType {
  XERO
  BANK_TRANSFER
  CASH
}

enum StudentStatus {
  CURRENT
  TRIAL
  DISENROLLED
}
